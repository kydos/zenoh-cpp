// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cloudevents.proto

#include "cloudevents.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace io {
namespace cloudevents {
namespace v1 {
PROTOBUF_CONSTEXPR CloudEvent_AttributesEntry_DoNotUse::CloudEvent_AttributesEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CloudEvent_AttributesEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloudEvent_AttributesEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloudEvent_AttributesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CloudEvent_AttributesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloudEvent_AttributesEntry_DoNotUseDefaultTypeInternal _CloudEvent_AttributesEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CloudEvent_CloudEventAttributeValue::CloudEvent_CloudEventAttributeValue(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attr_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CloudEvent_CloudEventAttributeValueDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloudEvent_CloudEventAttributeValueDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloudEvent_CloudEventAttributeValueDefaultTypeInternal() {}
  union {
    CloudEvent_CloudEventAttributeValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloudEvent_CloudEventAttributeValueDefaultTypeInternal _CloudEvent_CloudEventAttributeValue_default_instance_;
PROTOBUF_CONSTEXPR CloudEvent::CloudEvent(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.attributes_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.source_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.spec_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.type_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.data_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CloudEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloudEventDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloudEventDefaultTypeInternal() {}
  union {
    CloudEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloudEventDefaultTypeInternal _CloudEvent_default_instance_;
PROTOBUF_CONSTEXPR CloudEventBatch::CloudEventBatch(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.events_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CloudEventBatchDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CloudEventBatchDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CloudEventBatchDefaultTypeInternal() {}
  union {
    CloudEventBatch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CloudEventBatchDefaultTypeInternal _CloudEventBatch_default_instance_;
}  // namespace v1
}  // namespace cloudevents
}  // namespace io
static ::_pb::Metadata file_level_metadata_cloudevents_2eproto[4];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_cloudevents_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_cloudevents_2eproto = nullptr;

const uint32_t TableStruct_cloudevents_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent_AttributesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent_AttributesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent_AttributesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent_AttributesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent_CloudEventAttributeValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent_CloudEventAttributeValue, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent_CloudEventAttributeValue, _impl_.attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent, _impl_.id_),
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent, _impl_.spec_version_),
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent, _impl_.type_),
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent, _impl_.attributes_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEvent, _impl_.data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEventBatch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::io::cloudevents::v1::CloudEventBatch, _impl_.events_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::io::cloudevents::v1::CloudEvent_AttributesEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::io::cloudevents::v1::CloudEvent_CloudEventAttributeValue)},
  { 24, -1, -1, sizeof(::io::cloudevents::v1::CloudEvent)},
  { 39, -1, -1, sizeof(::io::cloudevents::v1::CloudEventBatch)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::io::cloudevents::v1::_CloudEvent_AttributesEntry_DoNotUse_default_instance_._instance,
  &::io::cloudevents::v1::_CloudEvent_CloudEventAttributeValue_default_instance_._instance,
  &::io::cloudevents::v1::_CloudEvent_default_instance_._instance,
  &::io::cloudevents::v1::_CloudEventBatch_default_instance_._instance,
};

const char descriptor_table_protodef_cloudevents_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021cloudevents.proto\022\021io.cloudevents.v1\032\031"
  "google/protobuf/any.proto\032\037google/protob"
  "uf/timestamp.proto\"\260\004\n\nCloudEvent\022\n\n\002id\030"
  "\001 \001(\t\022\016\n\006source\030\002 \001(\t\022\024\n\014spec_version\030\003 "
  "\001(\t\022\014\n\004type\030\004 \001(\t\022A\n\nattributes\030\005 \003(\0132-."
  "io.cloudevents.v1.CloudEvent.AttributesE"
  "ntry\022\025\n\013binary_data\030\006 \001(\014H\000\022\023\n\ttext_data"
  "\030\007 \001(\tH\000\022*\n\nproto_data\030\010 \001(\0132\024.google.pr"
  "otobuf.AnyH\000\032i\n\017AttributesEntry\022\013\n\003key\030\001"
  " \001(\t\022E\n\005value\030\002 \001(\01326.io.cloudevents.v1."
  "CloudEvent.CloudEventAttributeValue:\0028\001\032"
  "\323\001\n\030CloudEventAttributeValue\022\024\n\nce_boole"
  "an\030\001 \001(\010H\000\022\024\n\nce_integer\030\002 \001(\005H\000\022\023\n\tce_s"
  "tring\030\003 \001(\tH\000\022\022\n\010ce_bytes\030\004 \001(\014H\000\022\020\n\006ce_"
  "uri\030\005 \001(\tH\000\022\024\n\nce_uri_ref\030\006 \001(\tH\000\0222\n\014ce_"
  "timestamp\030\007 \001(\0132\032.google.protobuf.Timest"
  "ampH\000B\006\n\004attrB\006\n\004data\"@\n\017CloudEventBatch"
  "\022-\n\006events\030\001 \003(\0132\035.io.cloudevents.v1.Clo"
  "udEventB\213\001\n\027io.cloudevents.v1.protoP\001Z\032c"
  "loudevents.io/genproto/v1\252\002\032CloudNative."
  "CloudEvents.V1\312\002\027Io\\CloudEvents\\V1\\Proto"
  "\352\002\032Io::CloudEvents::V1::Protob\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_cloudevents_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_cloudevents_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_cloudevents_2eproto = {
    false, false, 877, descriptor_table_protodef_cloudevents_2eproto,
    "cloudevents.proto",
    &descriptor_table_cloudevents_2eproto_once, descriptor_table_cloudevents_2eproto_deps, 2, 4,
    schemas, file_default_instances, TableStruct_cloudevents_2eproto::offsets,
    file_level_metadata_cloudevents_2eproto, file_level_enum_descriptors_cloudevents_2eproto,
    file_level_service_descriptors_cloudevents_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_cloudevents_2eproto_getter() {
  return &descriptor_table_cloudevents_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_cloudevents_2eproto(&descriptor_table_cloudevents_2eproto);
namespace io {
namespace cloudevents {
namespace v1 {

// ===================================================================

CloudEvent_AttributesEntry_DoNotUse::CloudEvent_AttributesEntry_DoNotUse() {}
CloudEvent_AttributesEntry_DoNotUse::CloudEvent_AttributesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CloudEvent_AttributesEntry_DoNotUse::MergeFrom(const CloudEvent_AttributesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CloudEvent_AttributesEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cloudevents_2eproto_getter, &descriptor_table_cloudevents_2eproto_once,
      file_level_metadata_cloudevents_2eproto[0]);
}

// ===================================================================

class CloudEvent_CloudEventAttributeValue::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& ce_timestamp(const CloudEvent_CloudEventAttributeValue* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CloudEvent_CloudEventAttributeValue::_Internal::ce_timestamp(const CloudEvent_CloudEventAttributeValue* msg) {
  return *msg->_impl_.attr_.ce_timestamp_;
}
void CloudEvent_CloudEventAttributeValue::set_allocated_ce_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* ce_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_attr();
  if (ce_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ce_timestamp));
    if (message_arena != submessage_arena) {
      ce_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ce_timestamp, submessage_arena);
    }
    set_has_ce_timestamp();
    _impl_.attr_.ce_timestamp_ = ce_timestamp;
  }
  // @@protoc_insertion_point(field_set_allocated:io.cloudevents.v1.CloudEvent.CloudEventAttributeValue.ce_timestamp)
}
void CloudEvent_CloudEventAttributeValue::clear_ce_timestamp() {
  if (_internal_has_ce_timestamp()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.attr_.ce_timestamp_;
    }
    clear_has_attr();
  }
}
CloudEvent_CloudEventAttributeValue::CloudEvent_CloudEventAttributeValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.cloudevents.v1.CloudEvent.CloudEventAttributeValue)
}
CloudEvent_CloudEventAttributeValue::CloudEvent_CloudEventAttributeValue(const CloudEvent_CloudEventAttributeValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CloudEvent_CloudEventAttributeValue* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.attr_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_attr();
  switch (from.attr_case()) {
    case kCeBoolean: {
      _this->_internal_set_ce_boolean(from._internal_ce_boolean());
      break;
    }
    case kCeInteger: {
      _this->_internal_set_ce_integer(from._internal_ce_integer());
      break;
    }
    case kCeString: {
      _this->_internal_set_ce_string(from._internal_ce_string());
      break;
    }
    case kCeBytes: {
      _this->_internal_set_ce_bytes(from._internal_ce_bytes());
      break;
    }
    case kCeUri: {
      _this->_internal_set_ce_uri(from._internal_ce_uri());
      break;
    }
    case kCeUriRef: {
      _this->_internal_set_ce_uri_ref(from._internal_ce_uri_ref());
      break;
    }
    case kCeTimestamp: {
      _this->_internal_mutable_ce_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_ce_timestamp());
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.cloudevents.v1.CloudEvent.CloudEventAttributeValue)
}

inline void CloudEvent_CloudEventAttributeValue::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.attr_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_attr();
}

CloudEvent_CloudEventAttributeValue::~CloudEvent_CloudEventAttributeValue() {
  // @@protoc_insertion_point(destructor:io.cloudevents.v1.CloudEvent.CloudEventAttributeValue)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloudEvent_CloudEventAttributeValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_attr()) {
    clear_attr();
  }
}

void CloudEvent_CloudEventAttributeValue::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloudEvent_CloudEventAttributeValue::clear_attr() {
// @@protoc_insertion_point(one_of_clear_start:io.cloudevents.v1.CloudEvent.CloudEventAttributeValue)
  switch (attr_case()) {
    case kCeBoolean: {
      // No need to clear
      break;
    }
    case kCeInteger: {
      // No need to clear
      break;
    }
    case kCeString: {
      _impl_.attr_.ce_string_.Destroy();
      break;
    }
    case kCeBytes: {
      _impl_.attr_.ce_bytes_.Destroy();
      break;
    }
    case kCeUri: {
      _impl_.attr_.ce_uri_.Destroy();
      break;
    }
    case kCeUriRef: {
      _impl_.attr_.ce_uri_ref_.Destroy();
      break;
    }
    case kCeTimestamp: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.attr_.ce_timestamp_;
      }
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = ATTR_NOT_SET;
}


void CloudEvent_CloudEventAttributeValue::Clear() {
// @@protoc_insertion_point(message_clear_start:io.cloudevents.v1.CloudEvent.CloudEventAttributeValue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_attr();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloudEvent_CloudEventAttributeValue::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool ce_boolean = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _internal_set_ce_boolean(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 ce_integer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_ce_integer(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ce_string = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_ce_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.cloudevents.v1.CloudEvent.CloudEventAttributeValue.ce_string"));
        } else
          goto handle_unusual;
        continue;
      // bytes ce_bytes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ce_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ce_uri = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_ce_uri();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.cloudevents.v1.CloudEvent.CloudEventAttributeValue.ce_uri"));
        } else
          goto handle_unusual;
        continue;
      // string ce_uri_ref = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_ce_uri_ref();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.cloudevents.v1.CloudEvent.CloudEventAttributeValue.ce_uri_ref"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp ce_timestamp = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_ce_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloudEvent_CloudEventAttributeValue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.cloudevents.v1.CloudEvent.CloudEventAttributeValue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool ce_boolean = 1;
  if (_internal_has_ce_boolean()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_ce_boolean(), target);
  }

  // int32 ce_integer = 2;
  if (_internal_has_ce_integer()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_ce_integer(), target);
  }

  // string ce_string = 3;
  if (_internal_has_ce_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ce_string().data(), static_cast<int>(this->_internal_ce_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.cloudevents.v1.CloudEvent.CloudEventAttributeValue.ce_string");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ce_string(), target);
  }

  // bytes ce_bytes = 4;
  if (_internal_has_ce_bytes()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_ce_bytes(), target);
  }

  // string ce_uri = 5;
  if (_internal_has_ce_uri()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ce_uri().data(), static_cast<int>(this->_internal_ce_uri().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.cloudevents.v1.CloudEvent.CloudEventAttributeValue.ce_uri");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_ce_uri(), target);
  }

  // string ce_uri_ref = 6;
  if (_internal_has_ce_uri_ref()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ce_uri_ref().data(), static_cast<int>(this->_internal_ce_uri_ref().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.cloudevents.v1.CloudEvent.CloudEventAttributeValue.ce_uri_ref");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_ce_uri_ref(), target);
  }

  // .google.protobuf.Timestamp ce_timestamp = 7;
  if (_internal_has_ce_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::ce_timestamp(this),
        _Internal::ce_timestamp(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.cloudevents.v1.CloudEvent.CloudEventAttributeValue)
  return target;
}

size_t CloudEvent_CloudEventAttributeValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.cloudevents.v1.CloudEvent.CloudEventAttributeValue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (attr_case()) {
    // bool ce_boolean = 1;
    case kCeBoolean: {
      total_size += 1 + 1;
      break;
    }
    // int32 ce_integer = 2;
    case kCeInteger: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_ce_integer());
      break;
    }
    // string ce_string = 3;
    case kCeString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ce_string());
      break;
    }
    // bytes ce_bytes = 4;
    case kCeBytes: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_ce_bytes());
      break;
    }
    // string ce_uri = 5;
    case kCeUri: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ce_uri());
      break;
    }
    // string ce_uri_ref = 6;
    case kCeUriRef: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_ce_uri_ref());
      break;
    }
    // .google.protobuf.Timestamp ce_timestamp = 7;
    case kCeTimestamp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.attr_.ce_timestamp_);
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloudEvent_CloudEventAttributeValue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CloudEvent_CloudEventAttributeValue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloudEvent_CloudEventAttributeValue::GetClassData() const { return &_class_data_; }


void CloudEvent_CloudEventAttributeValue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CloudEvent_CloudEventAttributeValue*>(&to_msg);
  auto& from = static_cast<const CloudEvent_CloudEventAttributeValue&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.cloudevents.v1.CloudEvent.CloudEventAttributeValue)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.attr_case()) {
    case kCeBoolean: {
      _this->_internal_set_ce_boolean(from._internal_ce_boolean());
      break;
    }
    case kCeInteger: {
      _this->_internal_set_ce_integer(from._internal_ce_integer());
      break;
    }
    case kCeString: {
      _this->_internal_set_ce_string(from._internal_ce_string());
      break;
    }
    case kCeBytes: {
      _this->_internal_set_ce_bytes(from._internal_ce_bytes());
      break;
    }
    case kCeUri: {
      _this->_internal_set_ce_uri(from._internal_ce_uri());
      break;
    }
    case kCeUriRef: {
      _this->_internal_set_ce_uri_ref(from._internal_ce_uri_ref());
      break;
    }
    case kCeTimestamp: {
      _this->_internal_mutable_ce_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
          from._internal_ce_timestamp());
      break;
    }
    case ATTR_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloudEvent_CloudEventAttributeValue::CopyFrom(const CloudEvent_CloudEventAttributeValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.cloudevents.v1.CloudEvent.CloudEventAttributeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudEvent_CloudEventAttributeValue::IsInitialized() const {
  return true;
}

void CloudEvent_CloudEventAttributeValue::InternalSwap(CloudEvent_CloudEventAttributeValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.attr_, other->_impl_.attr_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudEvent_CloudEventAttributeValue::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cloudevents_2eproto_getter, &descriptor_table_cloudevents_2eproto_once,
      file_level_metadata_cloudevents_2eproto[1]);
}

// ===================================================================

class CloudEvent::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Any& proto_data(const CloudEvent* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Any&
CloudEvent::_Internal::proto_data(const CloudEvent* msg) {
  return *msg->_impl_.data_.proto_data_;
}
void CloudEvent::set_allocated_proto_data(::PROTOBUF_NAMESPACE_ID::Any* proto_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_data();
  if (proto_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proto_data));
    if (message_arena != submessage_arena) {
      proto_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proto_data, submessage_arena);
    }
    set_has_proto_data();
    _impl_.data_.proto_data_ = proto_data;
  }
  // @@protoc_insertion_point(field_set_allocated:io.cloudevents.v1.CloudEvent.proto_data)
}
void CloudEvent::clear_proto_data() {
  if (_internal_has_proto_data()) {
    if (GetArenaForAllocation() == nullptr) {
      delete _impl_.data_.proto_data_;
    }
    clear_has_data();
  }
}
CloudEvent::CloudEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CloudEvent::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:io.cloudevents.v1.CloudEvent)
}
CloudEvent::CloudEvent(const CloudEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CloudEvent* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{}
    , decltype(_impl_.id_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.spec_version_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_source().empty()) {
    _this->_impl_.source_.Set(from._internal_source(), 
      _this->GetArenaForAllocation());
  }
  _impl_.spec_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spec_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_spec_version().empty()) {
    _this->_impl_.spec_version_.Set(from._internal_spec_version(), 
      _this->GetArenaForAllocation());
  }
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    _this->_impl_.type_.Set(from._internal_type(), 
      _this->GetArenaForAllocation());
  }
  clear_has_data();
  switch (from.data_case()) {
    case kBinaryData: {
      _this->_internal_set_binary_data(from._internal_binary_data());
      break;
    }
    case kTextData: {
      _this->_internal_set_text_data(from._internal_text_data());
      break;
    }
    case kProtoData: {
      _this->_internal_mutable_proto_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_proto_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:io.cloudevents.v1.CloudEvent)
}

inline void CloudEvent::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_.attributes_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.id_){}
    , decltype(_impl_.source_){}
    , decltype(_impl_.spec_version_){}
    , decltype(_impl_.type_){}
    , decltype(_impl_.data_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.source_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.spec_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.spec_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_data();
}

CloudEvent::~CloudEvent() {
  // @@protoc_insertion_point(destructor:io.cloudevents.v1.CloudEvent)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CloudEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.attributes_.Destruct();
  _impl_.attributes_.~MapField();
  _impl_.id_.Destroy();
  _impl_.source_.Destroy();
  _impl_.spec_version_.Destroy();
  _impl_.type_.Destroy();
  if (has_data()) {
    clear_data();
  }
}

void CloudEvent::ArenaDtor(void* object) {
  CloudEvent* _this = reinterpret_cast< CloudEvent* >(object);
  _this->_impl_.attributes_.Destruct();
}
void CloudEvent::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloudEvent::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:io.cloudevents.v1.CloudEvent)
  switch (data_case()) {
    case kBinaryData: {
      _impl_.data_.binary_data_.Destroy();
      break;
    }
    case kTextData: {
      _impl_.data_.text_data_.Destroy();
      break;
    }
    case kProtoData: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.data_.proto_data_;
      }
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


void CloudEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:io.cloudevents.v1.CloudEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.attributes_.Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.source_.ClearToEmpty();
  _impl_.spec_version_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  clear_data();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloudEvent::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.cloudevents.v1.CloudEvent.id"));
        } else
          goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.cloudevents.v1.CloudEvent.source"));
        } else
          goto handle_unusual;
        continue;
      // string spec_version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_spec_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.cloudevents.v1.CloudEvent.spec_version"));
        } else
          goto handle_unusual;
        continue;
      // string type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.cloudevents.v1.CloudEvent.type"));
        } else
          goto handle_unusual;
        continue;
      // map<string, .io.cloudevents.v1.CloudEvent.CloudEventAttributeValue> attributes = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.attributes_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // bytes binary_data = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_binary_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string text_data = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_text_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "io.cloudevents.v1.CloudEvent.text_data"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any proto_data = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_proto_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloudEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.cloudevents.v1.CloudEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.cloudevents.v1.CloudEvent.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string source = 2;
  if (!this->_internal_source().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.cloudevents.v1.CloudEvent.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // string spec_version = 3;
  if (!this->_internal_spec_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_spec_version().data(), static_cast<int>(this->_internal_spec_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.cloudevents.v1.CloudEvent.spec_version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_spec_version(), target);
  }

  // string type = 4;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.cloudevents.v1.CloudEvent.type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_type(), target);
  }

  // map<string, .io.cloudevents.v1.CloudEvent.CloudEventAttributeValue> attributes = 5;
  if (!this->_internal_attributes().empty()) {
    using MapType = ::_pb::Map<std::string, ::io::cloudevents::v1::CloudEvent_CloudEventAttributeValue>;
    using WireHelper = CloudEvent_AttributesEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_attributes();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "io.cloudevents.v1.CloudEvent.AttributesEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(5, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // bytes binary_data = 6;
  if (_internal_has_binary_data()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_binary_data(), target);
  }

  // string text_data = 7;
  if (_internal_has_text_data()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_text_data().data(), static_cast<int>(this->_internal_text_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "io.cloudevents.v1.CloudEvent.text_data");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_text_data(), target);
  }

  // .google.protobuf.Any proto_data = 8;
  if (_internal_has_proto_data()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::proto_data(this),
        _Internal::proto_data(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.cloudevents.v1.CloudEvent)
  return target;
}

size_t CloudEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.cloudevents.v1.CloudEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .io.cloudevents.v1.CloudEvent.CloudEventAttributeValue> attributes = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attributes_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::io::cloudevents::v1::CloudEvent_CloudEventAttributeValue >::const_iterator
      it = this->_internal_attributes().begin();
      it != this->_internal_attributes().end(); ++it) {
    total_size += CloudEvent_AttributesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string source = 2;
  if (!this->_internal_source().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string spec_version = 3;
  if (!this->_internal_spec_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_spec_version());
  }

  // string type = 4;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  switch (data_case()) {
    // bytes binary_data = 6;
    case kBinaryData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_binary_data());
      break;
    }
    // string text_data = 7;
    case kTextData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_text_data());
      break;
    }
    // .google.protobuf.Any proto_data = 8;
    case kProtoData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.data_.proto_data_);
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloudEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CloudEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloudEvent::GetClassData() const { return &_class_data_; }


void CloudEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CloudEvent*>(&to_msg);
  auto& from = static_cast<const CloudEvent&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.cloudevents.v1.CloudEvent)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.attributes_.MergeFrom(from._impl_.attributes_);
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_source().empty()) {
    _this->_internal_set_source(from._internal_source());
  }
  if (!from._internal_spec_version().empty()) {
    _this->_internal_set_spec_version(from._internal_spec_version());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  switch (from.data_case()) {
    case kBinaryData: {
      _this->_internal_set_binary_data(from._internal_binary_data());
      break;
    }
    case kTextData: {
      _this->_internal_set_text_data(from._internal_text_data());
      break;
    }
    case kProtoData: {
      _this->_internal_mutable_proto_data()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
          from._internal_proto_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloudEvent::CopyFrom(const CloudEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.cloudevents.v1.CloudEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudEvent::IsInitialized() const {
  return true;
}

void CloudEvent::InternalSwap(CloudEvent* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.attributes_.InternalSwap(&other->_impl_.attributes_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.id_, lhs_arena,
      &other->_impl_.id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.source_, lhs_arena,
      &other->_impl_.source_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.spec_version_, lhs_arena,
      &other->_impl_.spec_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.type_, lhs_arena,
      &other->_impl_.type_, rhs_arena
  );
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudEvent::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cloudevents_2eproto_getter, &descriptor_table_cloudevents_2eproto_once,
      file_level_metadata_cloudevents_2eproto[2]);
}

// ===================================================================

class CloudEventBatch::_Internal {
 public:
};

CloudEventBatch::CloudEventBatch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:io.cloudevents.v1.CloudEventBatch)
}
CloudEventBatch::CloudEventBatch(const CloudEventBatch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CloudEventBatch* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){from._impl_.events_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:io.cloudevents.v1.CloudEventBatch)
}

inline void CloudEventBatch::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.events_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

CloudEventBatch::~CloudEventBatch() {
  // @@protoc_insertion_point(destructor:io.cloudevents.v1.CloudEventBatch)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CloudEventBatch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.events_.~RepeatedPtrField();
}

void CloudEventBatch::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CloudEventBatch::Clear() {
// @@protoc_insertion_point(message_clear_start:io.cloudevents.v1.CloudEventBatch)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CloudEventBatch::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .io.cloudevents.v1.CloudEvent events = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_events(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CloudEventBatch::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:io.cloudevents.v1.CloudEventBatch)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .io.cloudevents.v1.CloudEvent events = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_events_size()); i < n; i++) {
    const auto& repfield = this->_internal_events(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:io.cloudevents.v1.CloudEventBatch)
  return target;
}

size_t CloudEventBatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:io.cloudevents.v1.CloudEventBatch)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .io.cloudevents.v1.CloudEvent events = 1;
  total_size += 1UL * this->_internal_events_size();
  for (const auto& msg : this->_impl_.events_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CloudEventBatch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CloudEventBatch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CloudEventBatch::GetClassData() const { return &_class_data_; }


void CloudEventBatch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CloudEventBatch*>(&to_msg);
  auto& from = static_cast<const CloudEventBatch&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:io.cloudevents.v1.CloudEventBatch)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.events_.MergeFrom(from._impl_.events_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CloudEventBatch::CopyFrom(const CloudEventBatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:io.cloudevents.v1.CloudEventBatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CloudEventBatch::IsInitialized() const {
  return true;
}

void CloudEventBatch::InternalSwap(CloudEventBatch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CloudEventBatch::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_cloudevents_2eproto_getter, &descriptor_table_cloudevents_2eproto_once,
      file_level_metadata_cloudevents_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace cloudevents
}  // namespace io
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::io::cloudevents::v1::CloudEvent_AttributesEntry_DoNotUse*
Arena::CreateMaybeMessage< ::io::cloudevents::v1::CloudEvent_AttributesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::cloudevents::v1::CloudEvent_AttributesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::io::cloudevents::v1::CloudEvent_CloudEventAttributeValue*
Arena::CreateMaybeMessage< ::io::cloudevents::v1::CloudEvent_CloudEventAttributeValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::cloudevents::v1::CloudEvent_CloudEventAttributeValue >(arena);
}
template<> PROTOBUF_NOINLINE ::io::cloudevents::v1::CloudEvent*
Arena::CreateMaybeMessage< ::io::cloudevents::v1::CloudEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::cloudevents::v1::CloudEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::io::cloudevents::v1::CloudEventBatch*
Arena::CreateMaybeMessage< ::io::cloudevents::v1::CloudEventBatch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::io::cloudevents::v1::CloudEventBatch >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
